#!/bin/bash

set -eu -o pipefail

# shellcheck source=functions.sh.in
source "@functions_path@"

# shellcheck source=/dev/null
source "$EFIMIRROR_CONFIG_PATH"

cmd="${1:-}"
shift || :

usage() {
  echo "Usage: $0 enroll <part-uuid>|current" >&2
  echo "Usage: $0 unenroll <part-uuid>" >&2
  echo "Usage: $0 status" >&2
}

apply_changes() {
  systemctl daemon-reload
  systemctl reset-failed
  systemctl start local-fs.target
}

case "$cmd" in
enroll)
  if [ $# -ne 1 ]; then
    usage
    exit 1
  fi

  partuuid="$1"
  if [ "$partuuid" = current ]; then
    if ! partuuid=$(efibootmgr_get_current_boot_dev_partuuid); then
      echo "Error: failed to determine current boot partuuid" >&2
      exit 1
    fi
  fi

  readarray -t user_efi_partitions < <(get_configured_efi_partitions)
  if [[ "${user_efi_partitions[*]}" == *"$partuuid"* ]]; then
    echo "Partition already enrolled" >&2
    exit 0
  fi

  readarray -t system_efi_partitions < <(find_system_efi_partitions)
  if ! [[ "${system_efi_partitions[*]}" == *"$partuuid"* ]]; then
    echo "Error: partition ${partuuid} not found as a valid EFI partition" >&2
    exit 1
  fi

  echo "$partuuid" >> "$EFIMIRROR_PART_CONFIG_PATH"
  apply_changes
;;
unenroll)
  if [ $# -ne 1 ]; then
    usage
    exit 1
  fi

  partuuid="$1"

  readarray -t user_efi_partitions < <(get_configured_efi_partitions)
  if ! [[ "${user_efi_partitions[*]}" == *"$partuuid"* ]]; then
    echo "Partition not enrolled" >&2
    exit 0
  fi

  tmp_config=$(mktemp -p "$(dirname "$EFIMIRROR_PART_CONFIG_PATH")")
  for cur_partuuid in "${user_efi_partitions[@]}"; do
    [ "$cur_partuuid" != "$partuuid" ] || continue
    echo "$cur_partuuid"
  done > "$tmp_config"

  mv "$tmp_config" "$EFIMIRROR_PART_CONFIG_PATH"
  mount_dir="$MOUNT_BASE/${partuuid}"
  systemctl stop "$mount_dir" || :
  apply_changes
;;
status)
  if [ $# -ne 0 ]; then
    usage
    exit 1
  fi

  if ! readarray -t efi_partitions < <(get_efi_partitions | sort -u); then
    print "Error: no EFI partitions found, exiting"
    exit 1
  fi

  get_primary_efi_partition "${efi_partitions[@]}" # this prints status
  exit 0
;;
*)
  usage

  if [ "$cmd" == "--help" ]; then
    exit 0
  else
    exit 1
  fi
esac
